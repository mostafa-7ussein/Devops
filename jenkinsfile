
pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "mostafahu" // Replace with your Docker registry
        DOCKER_CREDENTIALS_ID = "mostafahu" // Replace with your Docker credentials ID
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def customImage = docker.build("wordpress", "-f Dockerfile .")
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("wordpress").push("latest")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'
        }
    }
}

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.build('wordpress', '-f Dockerfile .')
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
                        docker.image('wordpress').push('latest')
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Here you would deploy your Docker images, possibly using docker-compose
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            // Clean up
            sh 'docker system prune -f'
        }
    }
}
